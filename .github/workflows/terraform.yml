# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  push:
    branches: ['main']
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    # Linux 環境で実行
    runs-on: ubuntu-latest
    environment: production

    # GitHub Actions ランナーが ubuntu-latest、macos-latest、Windows-latest のいずれであるかに関係なく、Bash シェルを使用します。
    defaults:
      run:
        shell: bash

    steps:
      # ソースコードをチェックアウト
      - name: Checkout
        uses: actions/checkout@v3

      # ファイル一覧を表示
      - name: Show files
        run: ls -R

      # Terraform CLI の最新バージョンをインストールし、Terraform Cloud ユーザー API トークンを使用して Terraform CLI 構成ファイルを構成します。
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # 初期ファイルの作成、リモート状態のロード、モジュールのダウンロードなどにより、新規または既存の Terraform 作業ディレクトリを初期化します。
      - name: Terraform Init
        run: terraform init

      # すべての Terraform 構成ファイルが正規の形式に従っていることを確認します
      - name: Terraform Format
        run: terraform fmt -check

      # Terraform の実行計画を生成します。
      - name: Terraform Plan
        run: terraform plan -out main.tfplan -var "ARM_CLIENT_ID=07477e4f-0e4f-44ce-91e0-789c9bb3c11f" -var "ARM_SUBSCRIPTION_ID=fd311764-61f2-43c7-8578-386dbd9785f0" -var "ARM_TENANT_ID=4af6c951-81a2-4286-b6f3-4e1db39d5b1f" -var "ARM_CLIENT_SECRET=oml8Q~cXzTDHXBBofKaYr6z.QSMOpge4GNL0Tdyf"

      # ファイル一覧を表示
      - name: Show files
        run: ls -R

      # 実行計画ファイルを一時ストレージに保存
      - uses: actions/upload-artifact@v3
        with:
          name: my-tfstate
          path: main.tfplan

      # 実行計画ファイルに従ってリソースを作成
      - name: Terraform Apply
        # if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
        run: terraform apply main.tfplan
